
#!/usr/bin/env python3

# Copyright (C) 2020 VyOS maintainers and contributors
#
# This library is free software; you can redistribute it and/or modify it under the terms of
# the GNU Lesser General Public License as published by the Free Software Foundation;
# either version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library;
# if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 

import os
import sys
import pprint
import argparse
from datetime import datetime

from vyos.xml import load
from vyos.xml import merge


def local(folder, path):
    return os.path.join(folder, path.lstrip('/'))


def header_dict(loaded):
    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    return \
        f'# generated by: {__file__}\n' \
        f'# on this date: {now}\n' \
        f'\n' \
        f'definition = {loaded}\n'


def header_xml(loaded):
    xml, content = loaded.split('\n', 1)
    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    return \
        f'{xml}\n' \
        f'\n' \
        f'<!-- generated by: {__file__} -->\n' \
        f'<!-- on this date: {now} -->\n' \
        f'\n' \
        f'{content}\n'


def save_dict(fname, loaded):
    with open(fname, 'w') as w:
        print(f'saving {fname}')
        w.write(header_dict(loaded))


def save_raw(fname, loaded):
    os.makedirs(os.path.dirname(fname), mode=0o755, exist_ok=True)

    with open(fname, 'w') as w:
        print(f'saving {fname}')
        w.write(header_xml(loaded))


def main():
    parser = argparse.ArgumentParser(description='generate python file from xml defintions')

    parser.add_argument('encoding', type=str, choices=['xml', 'python'], help='output to use')
    parser.add_argument('folder', type=str, nargs='?', default='.', help='xml installation root')
    parser.add_argument('--dry', action='store_true', help='dry run, print to screen')

    args = parser.parse_args()

    if args.encoding == 'python':
        configuration = load.from_folder(load.configuration_definition)
        operational = load.from_folder(load.operational_definition)

        if args.dry:
            pprint.pprint(header_dict(configuration))
            pprint.pprint(header_dict(operational))
            sys.exit(0)

        if os.path.exists(load.configuration_cache):
            os.remove(load.configuration_cache)
        if os.path.exists(load.operational_cache):
            os.remove(load.operational_cache)
        save_dict(load.configuration_cache, configuration)
        save_dict(load.operational_cache, operational)
        sys.exit(0)

    if args.encoding == 'xml':
        configuration = merge.from_folder(load.configuration_definition)

        # the block of code in the command section of the file
        # will have been escaped in a way which can be reversed with
        # from xml.sax.saxutils import unescape

        operational = merge.from_folder(load.operational_definition)

        if args.dry:
            # print(configuration)
            print(operational)
            sys.exit(0)

        path = 'usr/share/vyos/xml'.split('/')
        for progress in range(1, len(path)+1):
            partial = os.path.join(*path[:progress])
            if not os.path.exists(partial):
                os.mkdir(partial)

        save_raw(local(args.folder, load.configuration_xml), configuration)
        save_raw(local(args.folder, load.operational_xml), operational)
        sys.exit(0)

    sys.exit(1)


if __name__ == '__main__':
    main()
