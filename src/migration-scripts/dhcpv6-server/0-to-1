#!/usr/bin/env python3
#
# Copyright (C) 2020 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# combine both sip-server-address and sip-server-name nodes to common sip-server

from sys import argv, exit
from vyos.config.tree import ConfigTree

if (len(argv) < 1):
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)
base = ['service', 'dhcpv6-server', 'shared-network-name']
if not config.exists(base):
    # Nothing to do
    exit(0)
else:
    # we need to run this for every configured network
    for network in config.list_nodes(base):
        for subnet in config.list_nodes(base + [network, 'subnet']):
            sip_server = []

            # Do we have 'sip-server-address' configured?
            if config.exists(base + [network, 'subnet', subnet, 'sip-server-address']):
                sip_server += config.return_values(base + [network, 'subnet', subnet, 'sip-server-address'])
                config.delete(base + [network, 'subnet', subnet, 'sip-server-address'])

            # Do we have 'sip-server-name' configured?
            if config.exists(base + [network, 'subnet', subnet, 'sip-server-name']):
                sip_server += config.return_values(base + [network, 'subnet', subnet, 'sip-server-name'])
                config.delete(base + [network, 'subnet', subnet, 'sip-server-name'])

            # Write new CLI value for sip-server
            for server in sip_server:
                config.set(base + [network, 'subnet', subnet, 'sip-server'], value=server, replace=False)

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        exit(1)
