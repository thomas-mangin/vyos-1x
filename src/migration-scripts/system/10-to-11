#!/usr/bin/env python3

# Unclutter RADIUS configuration
#
# Move radius-server top level tag nodes to a regular node which allows us
# to specify additional general features for the RADIUS client.

import sys
from vyos.config.tree import ConfigTree

if (len(sys.argv) < 1):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)
cfg_base = ['system', 'login']
if not (config.exists(cfg_base + ['radius-server']) or config.exists(cfg_base + ['radius-source-address'])):
    # Nothing to do
    sys.exit(0)
else:
    #
    # Migrate "system login radius-source-address" to "system login radius"
    #
    if config.exists(cfg_base + ['radius-source-address']):
        address = config.return_value(cfg_base + ['radius-source-address'])
        # delete old configuration node
        config.delete(cfg_base + ['radius-source-address'])
        # write new configuration node
        config.set(cfg_base + ['radius', 'source-address'], value=address)

    #
    # Migrate "system login radius-server" tag node to new
    # "system login radius server" tag node and also rename the "secret" node to "key"
    #
    for server in config.list_nodes(cfg_base + ['radius-server']):
        base_server = cfg_base + ['radius-server', server]
        # "key" node is mandatory
        key = config.return_value(base_server + ['secret'])
        config.set(cfg_base + ['radius', 'server', server, 'key'], value=key)

        # "port" is optional
        if config.exists(base_server + ['port']):
            port = config.return_value(base_server + ['port'])
            config.set(cfg_base + ['radius', 'server', server, 'port'], value=port)

        # "timeout is optional"
        if config.exists(base_server + ['timeout']):
            timeout = config.return_value(base_server + ['timeout'])
            config.set(cfg_base + ['radius', 'server', server, 'timeout'], value=timeout)

        # format as tag node
        config.set_tag(cfg_base + ['radius', 'server'])

        # delete old configuration node
        config.delete(base_server)

    # delete top level tag node
    if config.exists(cfg_base + ['radius-server']):
        config.delete(cfg_base + ['radius-server'])

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
